--- sleuthkit-4.0.0b1.orig/configure.ac	2012-09-29 10:33:09.796745064 +0200
+++ sleuthkit-4.0.0b1/configure.ac	2012-09-29 10:47:08.719502316 +0200
@@ -159,6 +159,33 @@
 fi
 AM_CONDITIONAL([X_JNI],[test "x$JNI_CPPFLAGS" != x])
 
+
+# Check if we should link libqcow.  
+AC_ARG_WITH([libqcow],
+    [AS_HELP_STRING([--without-libqcow],[Do not use libqcow even if it is installed])]
+    [AS_HELP_STRING([--with-libqcow=dir],[Specify that libqcow is installed in directory 'dir'])],
+    # If --with-libqcow or --without-libqcow is given
+    [],
+    # if nothing was specified, default to a test
+    [with_libqcow=yes])
+
+# check for the lib if they did not specify no
+AS_IF([test "x$with_libqcow" != "xno"],
+    # Test the dir if they specified something beyond yes/no
+    [AS_IF([test "x$with_libqcow" != "xyes"],
+        [AS_IF([test -d ${with_libqcow}/include],
+            [CFLAGS="$CFLAGS -I${with_libqcow}/include"
+                LDFLAGS="$LDFLAGS -L${with_libqcow}/lib"],
+            # Dir given was not correct
+            [AC_MSG_FAILURE([libqcow directory not found at ${with_libqcow}])])
+        ]
+    )]
+    # Check for the header file first to make sure they have the dev install
+    [AC_CHECK_HEADERS([libqcow.h], 
+      [AC_CHECK_LIB([qcow], [libqcow_file_open])]
+    )]
+)
+
 AC_CONFIG_COMMANDS([tsk3/tsk_incs.h],
         [
           echo "#ifndef _TSK_INCS_H" > tsk3/tsk_incs.h
--- sleuthkit-4.0.0b1.orig/tsk3/img/Makefile.am	2012-09-29 10:33:09.761745069 +0200
+++ sleuthkit-4.0.0b1/tsk3/img/Makefile.am	2012-09-29 10:47:08.676502318 +0200
@@ -3,7 +3,7 @@
 
 noinst_LTLIBRARIES = libtskimg.la
 libtskimg_la_SOURCES = img_open.c img_types.c raw.c raw.h \
-    aff.c aff.h ewf.c ewf.h tsk_img_i.h img_io.c mult_files.c
+    aff.c aff.h ewf.c ewf.h qcow.c qcow.h tsk_img_i.h img_io.c mult_files.c
 
 indent:
 	indent *.c *.h
--- sleuthkit-4.0.0b1.orig/tsk3/img/img_open.c	2012-09-29 10:33:09.761745069 +0200
+++ sleuthkit-4.0.0b1/tsk3/img/img_open.c	2012-09-29 11:33:20.149803470 +0200
@@ -27,6 +27,10 @@
 #include "ewf.h"
 #endif
 
+#if HAVE_LIBQCOW
+#include "qcow.h"
+#endif
+
 
 
 /**
@@ -114,7 +118,7 @@
      */
     if (type == TSK_IMG_TYPE_DETECT) {
         TSK_IMG_INFO *img_set = NULL;
-#if HAVE_LIBAFFLIB || HAVE_LIBEWF
+#if HAVE_LIBAFFLIB || HAVE_LIBEWF || HAVE_LIBQCOW
         char *set = NULL;
 #endif
 
@@ -158,6 +162,25 @@
                 return NULL;
             }
         }
+        else {
+            tsk_error_reset();
+        }
+#endif
+#if HAVE_LIBQCOW
+        if ((img_info = qcow_open(num_img, images, a_ssize)) != NULL) {
+            if (set == NULL) {
+                set = "QCOW";
+                img_set = img_info;
+            }
+            else {
+                img_set->close(img_set);
+                img_info->close(img_info);
+                tsk_error_reset();
+                tsk_error_set_errno(TSK_ERR_IMG_UNKTYPE);
+                tsk_error_set_errstr("QCOW or %s", set);
+                return NULL;
+            }
+        }
         else {
             tsk_error_reset();
         }
--- sleuthkit-4.0.0b1.orig/tsk3/img/img_types.c	2012-09-29 10:33:09.761745069 +0200
+++ sleuthkit-4.0.0b1/tsk3/img/img_types.c	2012-09-29 10:47:08.608502331 +0200
@@ -40,6 +40,9 @@
 #if HAVE_LIBEWF
     {"ewf", TSK_IMG_TYPE_EWF_EWF, "Expert Witness format (encase)"},
 #endif
+#if HAVE_LIBQCOW
+    {"qcow", TSK_IMG_TYPE_QCOW_QCOW, "QEMU Copy-On-Write"},
+#endif
     {0},
 };
 
--- sleuthkit-4.0.0b1.orig/tsk3/img/tsk_img.h	2012-09-29 10:33:09.761745069 +0200
+++ sleuthkit-4.0.0b1/tsk3/img/tsk_img.h	2012-09-29 10:47:08.708502318 +0200
@@ -66,6 +66,8 @@
 
         TSK_IMG_TYPE_EWF_EWF = 0x0040,  ///< EWF version
 
+        TSK_IMG_TYPE_QCOW_QCOW = 0x0050,  ///< QCOW version
+
         TSK_IMG_TYPE_UNSUPP = 0xffff,   ///< Unsupported disk image type
     } TSK_IMG_TYPE_ENUM;
 
--- sleuthkit-4.0.0b1.orig/tsk3/img/qcow.c	1970-01-01 01:00:00.000000000 +0100
+++ sleuthkit-4.0.0b1/tsk3/img/qcow.c	2012-09-29 11:34:56.909787570 +0200
@@ -0,0 +1,223 @@
+/*
+ * The Sleuth Kit - Add on for QEMU Copy-On-Write (QCOW) image support
+ *
+ * Copyright (c) 2011-2012 Joachim Metz <joachim.metz@gmail.com>
+ *
+ * qcow
+ *
+ * This software is distributed under the Common Public License 1.0
+ */
+
+/** \file qcow.c
+ * Internal code for TSK to interface with libqcow.
+ */
+
+#include "tsk_img_i.h"
+
+#if HAVE_LIBQCOW
+#include "qcow.h"
+
+#define TSK_QCOW_ERROR_STRING_SIZE 512
+
+
+/**
+ * Get error string from libqcow and make buffer emtpy if that didn't work. 
+ * @returns 1 if error message was not set
+ */
+static uint8_t
+getError(libqcow_error_t * qcow_error,
+    char error_string[TSK_QCOW_ERROR_STRING_SIZE])
+{
+    int retval;
+    error_string[0] = '\0';
+    retval = libqcow_error_backtrace_sprint(qcow_error,
+        error_string, TSK_QCOW_ERROR_STRING_SIZE);
+    if (retval)
+        return 1;
+    return 0;
+}
+
+static ssize_t
+qcow_image_read(TSK_IMG_INFO * img_info, TSK_OFF_T offset, char *buf,
+    size_t len)
+{
+    char error_string[TSK_QCOW_ERROR_STRING_SIZE];
+    libqcow_error_t *qcow_error = NULL;
+
+    ssize_t cnt;
+    IMG_QCOW_INFO *qcow_info = (IMG_QCOW_INFO *) img_info;
+
+    if (tsk_verbose)
+        tsk_fprintf(stderr,
+            "qcow_image_read: byte offset: %" PRIuOFF " len: %" PRIuSIZE
+            "\n", offset, len);
+
+    if (offset > img_info->size) {
+        tsk_error_reset();
+        tsk_error_set_errno(TSK_ERR_IMG_READ_OFF);
+        tsk_error_set_errstr("qcow_image_read - %" PRIuOFF, offset);
+        return -1;
+    }
+
+    tsk_take_lock(&(qcow_info->read_lock));
+    cnt = libqcow_file_read_random(qcow_info->file,
+        buf, len, offset, &qcow_error);
+    if (cnt < 0) {
+        char *errmsg = NULL;
+        tsk_error_reset();
+        tsk_error_set_errno(TSK_ERR_IMG_READ);
+        if (getError(qcow_error, error_string))
+            errmsg = strerror(errno);
+        else
+            errmsg = error_string;
+
+        tsk_error_set_errstr("qcow_image_read - offset: %" PRIuOFF
+            " - len: %" PRIuSIZE " - %s", offset, len, errmsg);
+        tsk_release_lock(&(qcow_info->read_lock));
+        return -1;
+    }
+    tsk_release_lock(&(qcow_info->read_lock));
+
+    return cnt;
+}
+
+static void
+qcow_image_imgstat(TSK_IMG_INFO * img_info, FILE * hFile)
+{
+    tsk_fprintf(hFile, "IMAGE FILE INFORMATION\n");
+    tsk_fprintf(hFile, "--------------------------------------------\n");
+    tsk_fprintf(hFile, "Image Type:\t\tqcow\n");
+    tsk_fprintf(hFile, "\nSize of data in bytes:\t%" PRIuOFF "\n",
+        img_info->size);
+
+    return;
+}
+
+static void
+qcow_image_close(TSK_IMG_INFO * img_info)
+{
+    IMG_QCOW_INFO *qcow_info = (IMG_QCOW_INFO *) img_info;
+
+    libqcow_file_close(qcow_info->file, NULL);
+    libqcow_file_free(&(qcow_info->file), NULL);
+
+    tsk_deinit_lock(&(qcow_info->read_lock));
+    free(img_info);
+}
+
+TSK_IMG_INFO *
+qcow_open(int a_num_img,
+    const TSK_TCHAR * const a_images[], unsigned int a_ssize)
+{
+    char error_string[TSK_QCOW_ERROR_STRING_SIZE];
+
+    libqcow_error_t *qcow_error = NULL;
+
+    IMG_QCOW_INFO *qcow_info = NULL;
+    TSK_IMG_INFO *img_info = NULL;
+
+    if ((qcow_info =
+            (IMG_QCOW_INFO *) tsk_img_malloc(sizeof(IMG_QCOW_INFO))) ==
+        NULL) {
+        return NULL;
+    }
+    img_info = (TSK_IMG_INFO *) qcow_info;
+
+    // Check the file signature before we call the library open
+#if defined( TSK_WIN32 )
+    if (libqcow_check_file_signature_wide(a_images[0], &qcow_error) != 1)
+#else
+    if (libqcow_check_file_signature(a_images[0], &qcow_error) != 1)
+#endif
+    {
+        tsk_error_reset();
+        tsk_error_set_errno(TSK_ERR_IMG_MAGIC);
+
+        getError(qcow_error, error_string);
+        tsk_error_set_errstr("qcow_open: Not an QCOW file (%s)",
+            error_string);
+        libqcow_error_free(&qcow_error);
+
+        free(qcow_info);
+
+        if (tsk_verbose != 0) {
+            tsk_fprintf(stderr, "Not an QCOW file\n");
+        }
+        return (NULL);
+    }
+
+    if (libqcow_file_initialize(&(qcow_info->file), &qcow_error) != 1) {
+        tsk_error_reset();
+        tsk_error_set_errno(TSK_ERR_IMG_OPEN);
+
+        getError(qcow_error, error_string);
+        tsk_error_set_errstr("qcow_open file: %" PRIttocTSK
+            ": Error initializing file (%s)", a_images[0], error_string);
+        libqcow_error_free(&qcow_error);
+
+        free(qcow_info);
+
+        if (tsk_verbose != 0) {
+            tsk_fprintf(stderr, "Unable to create QCOW file\n");
+        }
+        return (NULL);
+    }
+#if defined( TSK_WIN32 )
+    if (libqcow_file_open_wide(qcow_info->file,
+            (const wchar_t *) a_images[0],
+            LIBQCOW_OPEN_READ, &qcow_error) != 1)
+#else
+    if (libqcow_file_open(qcow_info->file,
+            (const char *) a_images[0],
+            LIBQCOW_OPEN_READ, &qcow_error) != 1)
+#endif
+    {
+        tsk_error_reset();
+        tsk_error_set_errno(TSK_ERR_IMG_OPEN);
+
+        getError(qcow_error, error_string);
+        tsk_error_set_errstr("qcow_open file: %" PRIttocTSK
+            ": Error opening (%s)", a_images[0], error_string);
+        libqcow_error_free(&qcow_error);
+
+        free(qcow_info);
+
+        if (tsk_verbose != 0) {
+            tsk_fprintf(stderr, "Error opening QCOW file\n");
+        }
+        return (NULL);
+    }
+    if (libqcow_file_get_media_size(qcow_info->file,
+            (size64_t *) & (img_info->size), &qcow_error) != 1) {
+        tsk_error_reset();
+        tsk_error_set_errno(TSK_ERR_IMG_OPEN);
+
+        getError(qcow_error, error_string);
+        tsk_error_set_errstr("qcow_open file: %" PRIttocTSK
+            ": Error getting size of image (%s)", a_images[0], error_string);
+        libqcow_error_free(&qcow_error);
+
+        free(qcow_info);
+
+        if (tsk_verbose != 0) {
+            tsk_fprintf(stderr, "Error getting size of QCOW file\n");
+        }
+        return (NULL);
+    }
+    if (a_ssize != 0) {
+        img_info->sector_size = a_ssize;
+    }
+    else {
+        img_info->sector_size = 512;
+    }
+    img_info->itype = TSK_IMG_TYPE_QCOW_QCOW;
+    img_info->read = &qcow_image_read;
+    img_info->close = &qcow_image_close;
+    img_info->imgstat = &qcow_image_imgstat;
+
+    // initialize the read lock
+    tsk_init_lock(&(qcow_info->read_lock));
+
+    return (img_info);
+}
+#endif                          /* HAVE_LIBQCOW */
--- sleuthkit-4.0.0b1.orig/tsk3/img/qcow.h	1970-01-01 01:00:00.000000000 +0100
+++ sleuthkit-4.0.0b1/tsk3/img/qcow.h	2012-09-29 11:04:31.442100777 +0200
@@ -0,0 +1,42 @@
+/*
+ * The Sleuth Kit - Add on for QEMU Copy-On-Write (QCOW) image support
+ *
+ * Copyright (c) 2011-2012 Joachim Metz <joachim.metz@gmail.com>
+ *
+ * This software is distributed under the Common Public License 1.0
+ */
+
+/* 
+ * Header files for QCOW-specific data structures and functions. 
+ */
+
+#ifndef _TSK_IMG_QCOW_H
+#define _TSK_IMG_QCOW_H
+
+#if HAVE_LIBQCOW
+
+// we used to check only for TSK_WIN32, but that fails on mingw
+#if defined(_MSC_VER)
+#include <config_msc.h>
+#endif
+
+#include <libqcow.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+    extern TSK_IMG_INFO *qcow_open(int, const TSK_TCHAR * const images[],
+        unsigned int a_ssize);
+
+    typedef struct {
+        TSK_IMG_INFO img_info;
+        libqcow_file_t *file;
+        tsk_lock_t read_lock;   ///< Lock for reads since libqcow is not thread safe -- only works if you have a single instance of QCOW_INFO for all threads.
+    } IMG_QCOW_INFO;
+
+#ifdef __cplusplus
+}
+#endif
+#endif
+#endif
